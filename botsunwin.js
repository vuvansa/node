const { Telegraf, Markup } = require('telegraf');
const { readFileSync, writeFileSync, existsSync } = require('fs');
const fetch = require('node-fetch');
// C√†i ƒë·∫∑t m·ªôt trong hai th∆∞ vi·ªán proxy n√†y, t√πy thu·ªôc v√†o lo·∫°i proxy b·∫°n c√≥
const { HttpsProxyAgent } = require('https-proxy-agent'); // D√†nh cho HTTP/HTTPS proxy
// const { SocksProxyAgent } = require('socks-proxy-agent'); // D√†nh cho SOCKS proxy (th∆∞·ªùng l√† SOCKS5)

// --- C·∫•u h√¨nh Bot ---
const BOT_TOKEN = '7537898028:AAHZwSZpQgnG_WIj5h0nlbfpB79-IvPucXo'; // Token bot c·ªßa b·∫°n
const ADMIN_ID = 5524246727; // ID c·ªßa admin ch√≠nh
const API_URL = 'http://157.10.52.15:3000/api/sunwin?key=axotaixiu; // API URL c·ªßa b·∫°n
const API_INTERVAL = 3000; // T·∫ßn su·∫•t g·ªçi API (3 gi√¢y)

// --- C·∫•u h√¨nh Proxy (CH·ªåN M·ªòT V√Ä ƒêI·ªÄN TH√îNG TIN C·ª¶A B·∫†N V√ÄO ƒê√ÇY) ---
// Thay th·∫ø 'your_proxy_ip', 'your_proxy_port', 'user', 'password' b·∫±ng th√¥ng tin th·∫≠t c·ªßa b·∫°n.

// N·∫øu b·∫°n d√πng HTTP/HTTPS Proxy (th∆∞·ªùng d√πng cho c√°c d·ªãch v·ª• proxy web):
const PROXY_URL = 'http://your_proxy_ip:your_proxy_port';
// N·∫øu proxy c√≥ x√°c th·ª±c: const PROXY_URL = 'http://user:password@your_proxy_ip:your_proxy_port';

// Ho·∫∑c n·∫øu b·∫°n d√πng SOCKS5 Proxy (th∆∞·ªùng l√† proxy c√° nh√¢n ƒë·ªÉ v∆∞·ª£t t∆∞·ªùng l·ª≠a):
// const PROXY_URL = 'socks5://your_proxy_ip:your_proxy_port';
// N·∫øu proxy c√≥ x√°c th·ª±c: const PROXY_URL = 'socks5h://user:password@your_proxy_ip:your_proxy_port';


// --- Kh·ªüi t·∫°o Bot v·ªõi c·∫•u h√¨nh Proxy ---
let bot;
if (PROXY_URL && PROXY_URL.startsWith('http')) {
    bot = new Telegraf(BOT_TOKEN, {
        telegram: {
            agent: new HttpsProxyAgent(PROXY_URL)
        }
    });
    console.log(`Bot kh·ªüi ƒë·ªông v·ªõi HTTP Proxy: ${PROXY_URL}`);
} else if (PROXY_URL && PROXY_URL.startsWith('socks')) {
    // ƒê·∫£m b·∫£o b·∫°n ƒë√£ uncomment d√≤ng 'const { SocksProxyAgent } = require('socks-proxy-agent');' ·ªü tr√™n
    bot = new Telegraf(BOT_TOKEN, {
        telegram: {
            agent: new SocksProxyAgent(PROXY_URL)
        }
    });
    console.log(`Bot kh·ªüi ƒë·ªông v·ªõi SOCKS Proxy: ${PROXY_URL}`);
} else {
    // Kh√¥ng d√πng proxy n·∫øu PROXY_URL r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá
    bot = new Telegraf(BOT_TOKEN);
    console.log('Bot kh·ªüi ƒë·ªông kh√¥ng d√πng Proxy.');
}


// --- T√™n file l∆∞u tr·ªØ d·ªØ li·ªáu ---
const KEYS_FILE = 'keys.json';
const USERS_FILE = 'users.json';
const PREDICTION_HISTORY_FILE = 'prediction_history.json';

// --- Bi·∫øn l∆∞u tr·ªØ d·ªØ li·ªáu trong b·ªô nh·ªõ ---
let keys = {}; // { "key_code": { uses: int, maxUses: int, expiresAt: timestamp, creatorId: int } }
let users = {}; // { "user_id": { active: boolean, keyUsed: string, isAdmin: boolean } }
let predictionHistory = []; // L·ªãch s·ª≠ c√°c d·ª± ƒëo√°n API ƒë√£ hi·ªÉn th·ªã
let currentApiData = null; // D·ªØ li·ªáu API m·ªõi nh·∫•t
let lastDisplayedSession = null; // Phi√™n g·∫ßn nh·∫•t ƒë√£ hi·ªÉn th·ªã tr√™n bot

// --- H√†m ƒë·ªçc/ghi file ---
function loadData(filePath, defaultData) {
    if (existsSync(filePath)) {
        try {
            return JSON.parse(readFileSync(filePath, 'utf8'));
        } catch (e) {
            console.error(`Error reading ${filePath}:`, e);
            return defaultData;
        }
    }
    return defaultData;
}

function saveData(filePath, data) {
    try {
        writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
    } catch (e) {
        console.error(`Error writing ${filePath}:`, e);
    }
}

// --- T·∫£i d·ªØ li·ªáu khi kh·ªüi ƒë·ªông ---
keys = loadData(KEYS_FILE, {});
users = loadData(USERS_FILE, { [ADMIN_ID]: { active: true, keyUsed: 'admin', isAdmin: true } }); // ƒê·∫∑t admin m·∫∑c ƒë·ªãnh
predictionHistory = loadData(PREDICTION_HISTORY_FILE, []);

// --- H√†m ki·ªÉm tra quy·ªÅn ---
const isAdmin = (userId) => users[userId] && users[userId].isAdmin;
const isMainAdmin = (userId) => userId === ADMIN_ID;

// --- H√†m ki·ªÉm tra key ---
function isValidKey(key) {
    const keyData = keys[key];
    if (!keyData) return false;
    if (keyData.uses >= keyData.maxUses) return false;
    if (keyData.expiresAt && Date.now() > keyData.expiresAt) return false;
    return true;
}

// --- H√†m c·∫≠p nh·∫≠t key ƒë√£ s·ª≠ d·ª•ng ---
function useKey(key) {
    if (keys[key]) {
        keys[key].uses++;
        saveData(KEYS_FILE, keys);
    }
}

// --- H√†m g·ª≠i th√¥ng b√°o chung ---
function sendBroadcastMessage(message) {
    for (const userId in users) {
        if (users[userId].active) {
            bot.telegram.sendMessage(userId, message, { parse_mode: 'Markdown' }).catch(e => {
                console.error(`Could not send message to user ${userId}:`, e.message);
                // C√≥ th·ªÉ ƒë√°nh d·∫•u user l√† inactive n·∫øu l·ªói do block bot
                if (e.message.includes('bot was blocked by the user')) {
                    users[userId].active = false;
                    saveData(USERS_FILE, users);
                }
            });
        }
    }
}

// --- H√†m ƒë·ªãnh d·∫°ng d·ªØ li·ªáu API ƒë·ªÉ hi·ªÉn th·ªã ---
function formatPredictionData(data) {
    if (!data) return "Kh√¥ng c√≥ d·ªØ li·ªáu d·ª± ƒëo√°n.";

    const { PHIEN_TRUOC, KET_QUA, DICE, PHIEN_HIEN_TAI, DU_DOAN, CAU } = data;

    return `
üé∞ *TOOl SUNWIN V1 üòòüòò*
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
*PHI√äN TR∆Ø·ªöC*: ${PHIEN_TRUOC || 'N/A'}
*K·∫æT QU·∫¢*: ${KET_QUA || 'N/A'}
*DICE*: ${DICE || 'N/A'}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê 
*PHI√äN HI·ªÜN T·∫†I*: ${PHIEN_HIEN_TAI || 'N/A'}
*D·ª∞ ƒêO√ÅN*: ${DU_DOAN || 'N/A'}
*C·∫¶U*: ${CAU || 'N/A'}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê 
`.trim(); // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a ·ªü ƒë·∫ßu/cu·ªëi
}

// --- Scheduler g·ªçi API v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i ---
let apiIntervalId;
let isBotRunning = false; // Tr·∫°ng th√°i bot

async function fetchAndProcessApiData() {
    try {
        const response = await fetch(API_URL);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();

        // Ki·ªÉm tra n·∫øu c√≥ phi√™n m·ªõi
        if (data.PHIEN_HIEN_TAI && data.PHIEN_HIEN_TAI !== lastDisplayedSession) {
            console.log(`New session detected: ${data.PHIEN_HIEN_TAI}`);
            // C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi nh·∫•t
            currentApiData = data;
            lastDisplayedSession = data.PHIEN_HIEN_TAI;

            // Ghi v√†o l·ªãch s·ª≠ d·ª± ƒëo√°n
            predictionHistory.push({
                timestamp: new Date().toISOString(),
                session: data.PHIEN_HIEN_TAI,
                data: data
            });
            saveData(PREDICTION_HISTORY_FILE, predictionHistory);

            // G·ª≠i d·ªØ li·ªáu m·ªõi t·ªõi t·∫•t c·∫£ ng∆∞·ªùi d√πng active
            const formattedMessage = formatPredictionData(data);
            for (const userId in users) {
                if (users[userId].active && users[userId].keyUsed) { // Ch·ªâ g·ª≠i cho user ƒë√£ k√≠ch ho·∫°t
                    bot.telegram.sendMessage(userId, formattedMessage, { parse_mode: 'Markdown' }).catch(e => {
                        console.error(`Could not send prediction to user ${userId}:`, e.message);
                        if (e.message.includes('bot was blocked by the user')) {
                            users[userId].active = false;
                            saveData(USERS_FILE, users);
                        }
                    });
                }
            }
        } else {
            // C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi nh·∫•t ngay c·∫£ khi kh√¥ng c√≥ phi√™n m·ªõi ƒë·ªÉ d√πng cho /chaybot n·∫øu c·∫ßn
            currentApiData = data;
            // console.log('No new session, keeping current display.');
        }

    } catch (error) {
        console.error('Error fetching API data:', error.message);
        // C√≥ th·ªÉ g·ª≠i th√¥ng b√°o l·ªói t·ªõi admin n·∫øu mu·ªën
        // bot.telegram.sendMessage(ADMIN_ID, `L·ªói API: ${error.message}`);
    }
}

// --- L·ªánh /start ---
bot.start((ctx) => {
    const userId = ctx.from.id;
    const userName = ctx.from.username || ctx.from.first_name;

    // Ghi nh·∫≠n ng∆∞·ªùi d√πng m·ªõi
    if (!users[userId]) {
        users[userId] = { active: true, keyUsed: null, isAdmin: false };
        saveData(USERS_FILE, users);
        console.log(`New user started bot: ${userId} (${userName})`);
    } else {
        users[userId].active = true; // ƒê·∫£m b·∫£o active n·∫øu h·ªç ƒë√£ d·ª´ng tr∆∞·ªõc ƒë√≥
        saveData(USERS_FILE, users);
    }

    if (isAdmin(userId)) {
        ctx.reply(
            `Xin ch√†o Admin ${userName}! üëã B·∫°n c√≥ th·ªÉ d√πng c√°c l·ªánh qu·∫£n l√Ω bot.` +
            '\n\n*C√°c l·ªánh cho Admin:*\n' +
            '/getkey `<key_name>` `<uses_limit>` `<duration_value>` `<duration_unit (h/d)>` - T·∫°o key m·ªõi\n' +
            '  _V√≠ d·ª•: `/getkey abcxyz 10 2 d` (key abcxyz d√πng 10 l·∫ßn trong 2 ng√†y)_\n' +
            '/xoakey `<key_name>` - X√≥a key ƒë√£ t·∫°o\n' +
            '/addadmin `<user_id>` - Th√™m admin ph·ª• (ch·ªâ admin ch√≠nh d√πng)\n' +
            '/xoaadmin `<user_id>` - X√≥a admin ph·ª• (ch·ªâ admin ch√≠nh d√πng)\n' +
            '/check - Xem danh s√°ch ng∆∞·ªùi d√πng v√† key\n' +
            '/thongbao `<tin_nh·∫Øn_c·ªßa_b·∫°n>` - G·ª≠i th√¥ng b√°o t·ªõi t·∫•t c·∫£ ng∆∞·ªùi d√πng\n\n' +
            '*C√°c l·ªánh chung:*\n' +
            '/chaybot - Kh·ªüi ƒë·ªông bot v√† nh·∫≠n d·ª± ƒëo√°n\n' +
            '/tatbot - D·ª´ng bot v√† kh√¥ng nh·∫≠n d·ª± ƒëo√°n\n' +
            '/key `<key_c·ªßa_b·∫°n>` - K√≠ch ho·∫°t bot b·∫±ng key'
        );
    } else if (users[userId].keyUsed) {
        ctx.reply(
            `Ch√†o m·ª´ng b·∫°n tr·ªü l·∫°i, ${userName}! Bot c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.` +
            '\n\n*C√°c l·ªánh c·ªßa b·∫°n:*\n' +
            '/chaybot - Kh·ªüi ƒë·ªông bot v√† nh·∫≠n d·ª± ƒëo√°n\n' +
            '/tatbot - D·ª´ng bot v√† kh√¥ng nh·∫≠n d·ª± ƒëo√°n'
        );
    } else {
        ctx.reply(
            `Ch√†o m·ª´ng b·∫°n, ${userName}! ƒê·ªÉ s·ª≠ d·ª•ng bot, b·∫°n c·∫ßn c√≥ key k√≠ch ho·∫°t.` +
            '\n\nVui l√≤ng nh·∫≠p l·ªánh `/key <key_c·ªßa_b·∫°n>` ƒë·ªÉ k√≠ch ho·∫°t bot.' +
            '\n\n*Th√¥ng tin v·ªÅ Bot:*\n' +
            'Tool Bot Sunwin V1üòòüòò\n' +
            'Ko ƒë·∫£m b·∫£o 100% ƒÉn\n' +
            'Tool Bot By Tu·∫•n T√∫\n' +
            'ƒê√≥ n√≥ s·∫Ω li√™n k·∫øt v·ªõi api\n' +
            'http://157.10.52.15:3000/api/sunwin?key=Nhinket'
        );
    }
});

// --- L·ªánh /key ---
bot.command('key', (ctx) => {
    const userId = ctx.from.id;
    const args = ctx.message.text.split(' ').slice(1);
    const userKey = args[0];

    if (!userKey) {
        return ctx.reply('Vui l√≤ng nh·∫≠p key c·ªßa b·∫°n sau l·ªánh /key. V√≠ d·ª•: `/key ABCXYZ`');
    }

    if (users[userId] && users[userId].keyUsed) {
        return ctx.reply('B·∫°n ƒë√£ k√≠ch ho·∫°t bot r·ªìi.');
    }

    if (isValidKey(userKey)) {
        useKey(userKey);
        users[userId].keyUsed = userKey;
        users[userId].active = true; // K√≠ch ho·∫°t ng∆∞·ªùi d√πng
        saveData(USERS_FILE, users);
        ctx.reply('Key c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng! üéâ' +
            '\n\nB√¢y gi·ªù b·∫°n c√≥ th·ªÉ d√πng l·ªánh `/chaybot` ƒë·ªÉ b·∫Øt ƒë·∫ßu nh·∫≠n d·ª± ƒëo√°n.');
    } else {
        ctx.reply('Key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n/s·ªë l∆∞·ª£t s·ª≠ d·ª•ng. Vui l√≤ng li√™n h·ªá admin.');
    }
});

// --- L·ªánh /chaybot ---
bot.command('chaybot', async (ctx) => {
    const userId = ctx.from.id;
    if (!isAdmin(userId) && (!users[userId] || !users[userId].keyUsed)) {
        return ctx.reply('B·∫°n c·∫ßn k√≠ch ho·∫°t bot b·∫±ng key tr∆∞·ªõc. Vui l√≤ng g√µ `/key <key_c·ªßa_b·∫°n>`');
    }

    if (isBotRunning) {
        return ctx.reply('Bot Sun winn ƒë√£ v√† ƒëang ho·∫°t ƒë·ªông r·ªìi.');
    }

    isBotRunning = true;
    users[userId].active = true; // ƒê·∫£m b·∫£o user active
    saveData(USERS_FILE, users);

    // G·ª≠i d·ªØ li·ªáu hi·ªán t·∫°i ngay l·∫≠p t·ª©c n·∫øu c√≥
    if (currentApiData) {
        await ctx.reply(`Bot Sun winn ƒëang kh·ªüi ƒë·ªông...`);
        ctx.reply(formatPredictionData(currentApiData), { parse_mode: 'Markdown' });
    } else {
        ctx.reply(`Bot Sun winn ƒëang kh·ªüi ƒë·ªông... ƒêang ch·ªù d·ªØ li·ªáu API m·ªõi nh·∫•t.`, { parse_mode: 'Markdown' });
    }

    // B·∫Øt ƒë·∫ßu interval g·ªçi API
    if (!apiIntervalId) {
        apiIntervalId = setInterval(fetchAndProcessApiData, API_INTERVAL);
        console.log('Bot started fetching API data.');
    }
});

// --- L·ªánh /tatbot ---
bot.command('tatbot', (ctx) => {
    const userId = ctx.from.id;
    if (!isAdmin(userId) && (!users[userId] || !users[userId].keyUsed)) {
        return ctx.reply('B·∫°n ch∆∞a k√≠ch ho·∫°t bot, kh√¥ng th·ªÉ d·ª´ng.');
    }

    // Kh√¥ng d·ª´ng to√†n b·ªô bot cho c√°c user b√¨nh th∆∞·ªùng, ch·ªâ d·ª´ng nh·∫≠n tin nh·∫Øn cho user ƒë√≥
    users[userId].active = false;
    saveData(USERS_FILE, users);

    // N·∫øu ch·ªâ c√≥ admin ho·∫∑c kh√¥ng c√≤n user active n√†o, m·ªõi d·ª´ng interval API
    const activeUsersCount = Object.values(users).filter(u => u.active && u.keyUsed).length;
    // Ki·ªÉm tra n·∫øu kh√¥ng c√≤n user active n√†o v√† ng∆∞·ªùi n√†y kh√¥ng ph·∫£i admin ch√≠nh (n·∫øu admin ch√≠nh t·∫Øt th√¨ d·ª´ng h·∫≥n)
    if (activeUsersCount === 0 || (isMainAdmin(userId) && activeUsersCount === 0)) {
        clearInterval(apiIntervalId);
        apiIntervalId = null;
        isBotRunning = false;
        console.log('No active users or Main Admin stopped, stopping API fetching.');
    }

    ctx.reply('Bot Sun winn ƒë√£ d·ª´ng. B·∫°n s·∫Ω kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ª± ƒëo√°n n·ªØa.');
});

// --- L·ªánh Admin: /getkey ---
bot.command('getkey', (ctx) => {
    const userId = ctx.from.id;
    if (!isAdmin(userId)) {
        return ctx.reply('B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
    }

    const args = ctx.message.text.split(' ').slice(1); // ['key_name', 'uses_limit', 'duration_value', 'duration_unit']
    if (args.length !== 4) {
        return ctx.reply(
            'C√∫ ph√°p: `/getkey <key_name> <uses_limit> <duration_value> <duration_unit (h/d)>`' +
            '\n_V√≠ d·ª•: `/getkey abcxyz 10 2 d` (key abcxyz d√πng 10 l·∫ßn trong 2 ng√†y)_'
        );
    }

    const [keyName, usesLimitStr, durationValueStr, durationUnit] = args;
    const usesLimit = parseInt(usesLimitStr, 10);
    const durationValue = parseInt(durationValueStr, 10);

    if (isNaN(usesLimit) || usesLimit <= 0) {
        return ctx.reply('S·ªë l∆∞·ª£t s·ª≠ d·ª•ng ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng.');
    }
    if (isNaN(durationValue) || durationValue <= 0) {
        return ctx.reply('Th·ªùi gian ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng.');
    }
    if (!['h', 'd'].includes(durationUnit)) {
        return ctx.reply('ƒê∆°n v·ªã th·ªùi gian ph·∫£i l√† `h` (gi·ªù) ho·∫∑c `d` (ng√†y).');
    }

    if (keys[keyName]) {
        return ctx.reply(`Key \`${keyName}\` ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n key kh√°c.`);
    }

    let expiresAt = null;
    if (durationUnit === 'h') {
        expiresAt = Date.now() + durationValue * 60 * 60 * 1000; // Gi·ªù sang milliseconds
    } else if (durationUnit === 'd') {
        expiresAt = Date.now() + durationValue * 24 * 60 * 60 * 1000; // Ng√†y sang milliseconds
    }

    keys[keyName] = {
        uses: 0,
        maxUses: usesLimit,
        expiresAt: expiresAt,
        creatorId: userId,
        createdAt: new Date().toISOString()
    };
    saveData(KEYS_FILE, keys);
    ctx.reply(`Key \`${keyName}\` ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! ` +
        `S·ª≠ d·ª•ng t·ªëi ƒëa: ${usesLimit} l·∫ßn. ` +
        `H·∫øt h·∫°n v√†o: ${expiresAt ? new Date(expiresAt).toLocaleString() : 'Kh√¥ng gi·ªõi h·∫°n'}.`);
});

// --- L·ªánh Admin: /xoakey ---
bot.command('xoakey', (ctx) => {
    const userId = ctx.from.id;
    if (!isAdmin(userId)) {
        return ctx.reply('B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
    }

    const args = ctx.message.text.split(' ').slice(1);
    const keyName = args[0];

    if (!keyName) {
        return ctx.reply('Vui l√≤ng nh·∫≠p t√™n key b·∫°n mu·ªën x√≥a. V√≠ d·ª•: `/xoakey ABCXYZ`');
    }

    if (keys[keyName]) {
        delete keys[keyName];
        saveData(KEYS_FILE, keys);
        // X√≥a key ƒë√£ s·ª≠ d·ª•ng kh·ªèi ng∆∞·ªùi d√πng n·∫øu c√≥
        for (const uid in users) {
            if (users[uid].keyUsed === keyName) {
                users[uid].keyUsed = null;
                users[uid].active = false; // ƒê√°nh d·∫•u l√† inactive khi key b·ªã x√≥a
            }
        }
        saveData(USERS_FILE, users);
        ctx.reply(`Key \`${keyName}\` ƒë√£ ƒë∆∞·ª£c x√≥a v√† g·ª° b·ªè kh·ªèi ng∆∞·ªùi d√πng.`);
    } else {
        ctx.reply(`Key \`${keyName}\` kh√¥ng t·ªìn t·∫°i.`);
    }
});

// --- L·ªánh Admin: /addadmin ---
bot.command('addadmin', (ctx) => {
    const userId = ctx.from.id;
    if (!isMainAdmin(userId)) { // Ch·ªâ admin ch√≠nh m·ªõi c√≥ quy·ªÅn th√™m admin ph·ª•
        return ctx.reply('B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m admin ph·ª•.');
    }

    const args = ctx.message.text.split(' ').slice(1);
    const targetUserId = parseInt(args[0], 10);

    if (isNaN(targetUserId)) {
        return ctx.reply('Vui l√≤ng nh·∫≠p ID ng∆∞·ªùi d√πng h·ª£p l·ªá ƒë·ªÉ th√™m l√†m admin ph·ª•.');
    }

    if (targetUserId === ADMIN_ID) {
        return ctx.reply('Ng∆∞·ªùi n√†y ƒë√£ l√† admin ch√≠nh r·ªìi.');
    }

    if (!users[targetUserId]) {
        users[targetUserId] = { active: false, keyUsed: null, isAdmin: false }; // Kh·ªüi t·∫°o n·∫øu ch∆∞a c√≥
    }
    if (users[targetUserId].isAdmin) {
        return ctx.reply(`Ng∆∞·ªùi d√πng ID ${targetUserId} ƒë√£ l√† admin r·ªìi.`);
    }

    users[targetUserId].isAdmin = true;
    users[targetUserId].active = true; // Coi nh∆∞ admin lu√¥n active
    saveData(USERS_FILE, users);
    ctx.reply(`Ng∆∞·ªùi d√πng ID \`${targetUserId}\` ƒë√£ ƒë∆∞·ª£c th√™m l√†m admin ph·ª•.`);
    bot.telegram.sendMessage(targetUserId, 'B·∫°n ƒë√£ ƒë∆∞·ª£c th√™m l√†m admin ph·ª• cho bot. Vui l√≤ng g√µ /start ƒë·ªÉ xem c√°c l·ªánh admin.', { parse_mode: 'Markdown' }).catch(e => {
        console.error(`Could not notify new admin ${targetUserId}:`, e.message);
    });
});

// --- L·ªánh Admin: /xoaadmin ---
bot.command('xoaadmin', (ctx) => {
    const userId = ctx.from.id;
    if (!isMainAdmin(userId)) { // Ch·ªâ admin ch√≠nh m·ªõi c√≥ quy·ªÅn x√≥a admin ph·ª•
        return ctx.reply('B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a admin ph·ª•.');
    }

    const args = ctx.message.text.split(' ').slice(1);
    const targetUserId = parseInt(args[0], 10);

    if (isNaN(targetUserId)) {
        return ctx.reply('Vui l√≤ng nh·∫≠p ID ng∆∞·ªùi d√πng h·ª£p l·ªá ƒë·ªÉ x√≥a admin.');
    }
    if (targetUserId === ADMIN_ID) {
        return ctx.reply('Kh√¥ng th·ªÉ x√≥a admin ch√≠nh.');
    }
    if (!users[targetUserId] || !users[targetUserId].isAdmin) {
        return ctx.reply(`Ng∆∞·ªùi d√πng ID ${targetUserId} kh√¥ng ph·∫£i l√† admin ph·ª•.`);
    }

    users[targetUserId].isAdmin = false;
    saveData(USERS_FILE, users);
    ctx.reply(`Ng∆∞·ªùi d√πng ID \`${targetUserId}\` ƒë√£ b·ªã x√≥a kh·ªèi quy·ªÅn admin ph·ª•.`);
    bot.telegram.sendMessage(targetUserId, 'B·∫°n ƒë√£ b·ªã g·ª° b·ªè quy·ªÅn admin ph·ª• c·ªßa bot.', { parse_mode: 'Markdown' }).catch(e => {
        console.error(`Could not notify removed admin ${targetUserId}:`, e.message);
    });
});

// --- L·ªánh Admin: /check ---
bot.command('check', (ctx) => {
    const userId = ctx.from.id;
    if (!isAdmin(userId)) {
        return ctx.reply('B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
    }

    let userList = '--- *Danh s√°ch Ng∆∞·ªùi d√πng* ---\n\n';
    let userCount = 0;
    for (const id in users) {
        userCount++;
        const user = users[id];
        const status = user.active ? '‚úÖ Active' : '‚ùå Inactive';
        const role = user.isAdmin ? (id == ADMIN_ID ? 'üëë Main Admin' : '‚ú® Sub Admin') : 'üë§ User';
        const keyInfo = user.keyUsed ? `(Key: \`${user.keyUsed}\`)` : '';
        userList += `ID: \`${id}\` | Role: ${role} | Status: ${status} ${keyInfo}\n`;
    }
    userList += `\nT·ªïng s·ªë ng∆∞·ªùi d√πng: ${userCount}`;

    let keyList = '\n\n--- *Danh s√°ch Key* ---\n\n';
    let keyCount = 0;
    for (const keyName in keys) {
        keyCount++;
        const keyData = keys[keyName];
        const expires = keyData.expiresAt ? new Date(keyData.expiresAt).toLocaleString() : 'Kh√¥ng gi·ªõi h·∫°n';
        const remainingUses = keyData.maxUses - keyData.uses;
        keyList += `Key: \`${keyName}\` | S·ª≠ d·ª•ng: ${keyData.uses}/${keyData.maxUses} | C√≤n: ${remainingUses} | H·∫øt h·∫°n: ${expires}\n`;
    }
    keyList += `\nT·ªïng s·ªë key: ${keyCount}`;

    ctx.reply(userList + keyList, { parse_mode: 'Markdown' });
});

// --- L·ªánh Admin: /thongbao ---
bot.command('thongbao', (ctx) => {
    const userId = ctx.from.id;
    if (!isAdmin(userId)) {
        return ctx.reply('B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
    }

    const message = ctx.message.text.slice('/thongbao '.length).trim();
    if (!message) {
        return ctx.reply('Vui l√≤ng nh·∫≠p n·ªôi dung th√¥ng b√°o. V√≠ d·ª•: `/thongbao Bot s·∫Ω b·∫£o tr√¨ v√†o 22h t·ªëi nay.`');
    }

    sendBroadcastMessage(`üì£ *TH√îNG B√ÅO T·ª™ ADMIN:*\n\n${message}`);
    ctx.reply('Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi t·∫•t c·∫£ ng∆∞·ªùi d√πng active.');
});


// --- X·ª≠ l√Ω tin nh·∫Øn vƒÉn b·∫£n kh√¥ng ph·∫£i l·ªánh ---
bot.on('text', (ctx) => {
    // Ch·ªâ tr·∫£ l·ªùi n·∫øu tin nh·∫Øn kh√¥ng ph·∫£i l√† m·ªôt l·ªánh b·∫Øt ƒë·∫ßu b·∫±ng '/'
    if (!ctx.message.text.startsWith('/')) {
        const userId = ctx.from.id;
        if (isAdmin(userId)) {
             ctx.reply('Admin: B·∫°n c√≥ th·ªÉ d√πng c√°c l·ªánh qu·∫£n l√Ω bot ho·∫∑c `/help` ƒë·ªÉ xem t·∫•t c·∫£ l·ªánh.');
        } else if (users[userId] && users[userId].keyUsed) {
             ctx.reply('B·∫°n c√≥ th·ªÉ d√πng l·ªánh `/chaybot` ho·∫∑c `/tatbot`.');
        } else {
             ctx.reply('Vui l√≤ng d√πng l·ªánh `/key <key_c·ªßa_b·∫°n>` ƒë·ªÉ k√≠ch ho·∫°t bot.');
        }
    }
});

// --- Kh·ªüi ƒë·ªông bot ---
bot.launch()
    .then(() => {
        console.log('Bot Sunwin ƒë√£ kh·ªüi ƒë·ªông!');
        // B·∫Øt ƒë·∫ßu interval ngay khi bot kh·ªüi ƒë·ªông ƒë·ªÉ c√≥ d·ªØ li·ªáu ban ƒë·∫ßu
        // v√† x·ª≠ l√Ω vi·ªác g·ª≠i cho c√°c user active ƒë√£ kh·ªüi ƒë·ªông t·ª´ tr∆∞·ªõc.
        apiIntervalId = setInterval(fetchAndProcessApiData, API_INTERVAL);
        console.log(`B·∫Øt ƒë·∫ßu l·∫•y d·ªØ li·ªáu API m·ªói ${API_INTERVAL / 1000} gi√¢y.`);

        // N·∫øu c√≥ ng∆∞·ªùi d√πng active ƒë√£ k√≠ch ho·∫°t key t·ª´ tr∆∞·ªõc, g·ª≠i th√¥ng b√°o cho h·ªç
        for (const userId in users) {
            if (users[userId].active && users[userId].keyUsed && userId != ADMIN_ID) {
                bot.telegram.sendMessage(userId, 'Bot Sunwin ƒë√£ kh·ªüi ƒë·ªông l·∫°i v√† ƒëang ho·∫°t ƒë·ªông!').catch(e => {
                    console.error(`Could not notify user ${userId} about restart:`, e.message);
                });
            }
        }
    })
    .catch((err) => {
        console.error('L·ªói khi kh·ªüi ƒë·ªông Bot Sunwin:', err);
    });

// B·∫≠t c√°c t√≠n hi·ªáu d·ª´ng linh ho·∫°t (SIGINT, SIGTERM) ƒë·ªÉ bot c√≥ th·ªÉ ƒë√≥ng gracefully.
process.once('SIGINT', () => {
    console.log('SIGINT received, stopping bot...');
    clearInterval(apiIntervalId); // D·ª´ng interval
    bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
    console.log('SIGTERM received, stopping bot...');
    clearInterval(apiIntervalId); // D·ª´ng interval
    bot.stop('SIGTERM');
});
